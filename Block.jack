/** Класс, отвечающий за типы блоков. */
class Block {
    static Block air;
    static Block stone;
    static Block coin;
    static Block key;
    static Block finish;
    static Block lock;

    field boolean _moveThrough;

    constructor Block new(boolean moveThrough){
        let _moveThrough = moveThrough;
        return this;
    }

    /** Инициализирует типы блоков */
    function void initBlocks(){
        let air = Block.new(true);
        let stone = Block.new(false);
        let coin = Block.new(true);
        let key = Block.new(true);
        let finish = Block.new(true);
        let lock = Block.new(false);
        return;
    }

    /** Парсит блок из символа */
    function Block parse(char blockChar){
        if ((blockChar = 32) | (blockChar = 80)){ // ' ' or 'P' = air
            return air;
        }

        if (blockChar = 35){ // '#' = stone
            return stone;
        }

        if (blockChar = 67){ // 'C' = coin
            return coin;
        }

        if (blockChar = 75){ // 'K' = key
            return key;
        }

        if (blockChar = 70){ // 'F' = finish
            return finish;
        }

        if (blockChar = 76){ // 'L' = lock
            return lock;
        }

        do Exception.throw("Block: invalid block");
        return 0;
    }

    method boolean onTryMove(Level level, Map map, int x, int y){
        var Score score;

        if (this = lock){
            let score = level.getScore();
            if (score.hasKey()){
                do score.DecrementKeys();
                do map.removeBlock(x, y);
                return true;
            }
        }

        return false;
    }

    method void onStepped(Level level, Map map, int x, int y){
        var Score score;

        if (this = coin){
            let score = level.getScore();
            do score.IncrementCoins();
            do map.removeBlock(x, y);
        }
        if (this = key){
            let score = level.getScore();
            do score.IncrementKeys();
            do map.removeBlock(x, y);
        }
        if (this = finish){ // next level

            do map.removeBlock(x, y);
        }

        return;
    }

    method boolean canMoveThrough(){
        return _moveThrough;
    }

    function Block getAir(){
        return air;
    }

    /** Отрисовывает блок с учётом координаты левого края и размеров */
    method void render(int x, int y, int width, int height){
        // TODO: убрать размеры, они бесполезны
        var int memAddress;
        let memAddress = 16384 + (y * 32) + (x / 16);

        if (this = stone){
            do _renderFull(memAddress);
        }
        if (this = coin){
            do _renderCoin(memAddress);
        }
        if (this = key){
            do _renderKey(memAddress);
        }
        if (this = finish){
            do _renderFinish(memAddress);
        }
        if (this = lock){
            do _renderLock(memAddress);
        }
        return;
    }

    /** Рендерит полностью закрашенный квадрат */
    method void _renderFull(int memAddress){
        do Memory.poke(memAddress + 0, -1);
        do Memory.poke(memAddress + 32, -1);
        do Memory.poke(memAddress + 64, -1);
        do Memory.poke(memAddress + 96, -1);
        do Memory.poke(memAddress + 128, -1);
        do Memory.poke(memAddress + 160, -1);
        do Memory.poke(memAddress + 192, -1);
        do Memory.poke(memAddress + 224, -1);
        do Memory.poke(memAddress + 256, -1);
        do Memory.poke(memAddress + 288, -1);
        do Memory.poke(memAddress + 320, -1);
        do Memory.poke(memAddress + 352, -1);
        do Memory.poke(memAddress + 384, -1);
        do Memory.poke(memAddress + 416, -1);
        do Memory.poke(memAddress + 448, -1);
        do Memory.poke(memAddress + 480, -1);
        return;
    }

    method void _renderCoin(int memAddress){
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 960);
        do Memory.poke(memAddress + 64, 4080);
        do Memory.poke(memAddress + 96, 7224);
        do Memory.poke(memAddress + 128, 15324);
        do Memory.poke(memAddress + 160, 12876);
        do Memory.poke(memAddress + 192, 25158);
        do Memory.poke(memAddress + 224, 25542);
        do Memory.poke(memAddress + 256, 24646);
        do Memory.poke(memAddress + 288, 24646);
        do Memory.poke(memAddress + 320, 12364);
        do Memory.poke(memAddress + 352, 14428);
        do Memory.poke(memAddress + 384, 7224);
        do Memory.poke(memAddress + 416, 4080);
        do Memory.poke(memAddress + 448, 960);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    method void _renderKey(int memAddress){
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 0);
        do Memory.poke(memAddress + 128, 0);
        do Memory.poke(memAddress + 160, 28);
        do Memory.poke(memAddress + 192, 38);
        do Memory.poke(memAddress + 224, 13814);
        do Memory.poke(memAddress + 256, 32766);
        do Memory.poke(memAddress + 288, 62);
        do Memory.poke(memAddress + 320, 28);
        do Memory.poke(memAddress + 352, 0);
        do Memory.poke(memAddress + 384, 0);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    method void _renderFinish(int memAddress){
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 16380);
        do Memory.poke(memAddress + 96, 11468);
        do Memory.poke(memAddress + 128, 11468);
        do Memory.poke(memAddress + 160, 13116);
        do Memory.poke(memAddress + 192, 13116);
        do Memory.poke(memAddress + 224, 11468);
        do Memory.poke(memAddress + 256, 11468);
        do Memory.poke(memAddress + 288, 13116);
        do Memory.poke(memAddress + 320, 13116);
        do Memory.poke(memAddress + 352, 11468);
        do Memory.poke(memAddress + 384, 11468);
        do Memory.poke(memAddress + 416, 16380);
        do Memory.poke(memAddress + 448, 12);
        do Memory.poke(memAddress + 480, 12);
        return;
    }

    method void _renderLock(int memAddress) {
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 2016);
        do Memory.poke(memAddress + 64, 3120);
        do Memory.poke(memAddress + 96, 2448);
        do Memory.poke(memAddress + 128, 2640);
        do Memory.poke(memAddress + 160, 2640);
        do Memory.poke(memAddress + 192, 2640);
        do Memory.poke(memAddress + 224, 2640);
        do Memory.poke(memAddress + 256, 8184);
        do Memory.poke(memAddress + 288, 12300);
        do Memory.poke(memAddress + 320, 8196);
        do Memory.poke(memAddress + 352, 8196);
        do Memory.poke(memAddress + 384, 8196);
        do Memory.poke(memAddress + 416, 8196);
        do Memory.poke(memAddress + 448, 12300);
        do Memory.poke(memAddress + 480, 8184);
        return;
    }
}
