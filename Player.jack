class Player {
    field int _gameX;
    field int _gameY;
    field int _legsDirection;

    constructor Player new(int gameX, int gameY){
        let _gameX = gameX;
        let _gameY = gameY;
        return this;
    }

    /** 
    Обрабатывает движение игрока в сторону.
    0 - up, 1 - down, 2 - left, 3 - right    
    */
    method void tryMove(Map map, int direction, int startX, int startY){
        var Block block;
        var int dx;
        var int dy;
        var int x;
        var int y;

        let x = _gameX;
        let y = _gameY;
        let _legsDirection = direction;

        while (true){
            do map.reRender(startX, startY, _gameX, _gameY);
            let _gameX = x;
            let _gameY = y;
            do render(startX, startY);

            if (direction = 0){
                let y = y - 1;
            }
            if (direction = 1){
                let y = y + 1;
            }
            if (direction = 2){
                let x = x - 1;
            }
            if (direction = 3){
                let x = x + 1;
            }

            let block = map.getBlock(x, y);
            if (block = -1){
                return;
            }

            if (~block.canMoveThrough()){
                return;
            }
        }

        return;
    }


    method void render(int mapStartX, int mapStartY){
        var int location;
        let location = ((_gameY * 16 + mapStartY) * 32) + (_gameX * 16 + mapStartX / 16);

        if (_legsDirection = 0) {
            do renderUp(location);
        }
        if (_legsDirection = 1) {
            do renderDown(location);
        }
        if (_legsDirection = 2) {
            do renderLeft(location);
        }
        if (_legsDirection = 3) {
            do renderRight(location);
        }

        return;
    }

    method void renderUp(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 14392);
        do Memory.poke(memAddress + 32, 26664);
        do Memory.poke(memAddress + 64, 20456);
        do Memory.poke(memAddress + 96, 16392);
        do Memory.poke(memAddress + 128, 18380);
        do Memory.poke(memAddress + 160, 26660);
        do Memory.poke(memAddress + 192, 8196);
        do Memory.poke(memAddress + 224, 8196);
        do Memory.poke(memAddress + 256, 9828);
        do Memory.poke(memAddress + 288, 9828);
        do Memory.poke(memAddress + 320, 8196);
        do Memory.poke(memAddress + 352, 12300);
        do Memory.poke(memAddress + 384, 8184);
        do Memory.poke(memAddress + 416, 0);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    method void renderDown(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 0);
        do Memory.poke(memAddress + 96, 8184);
        do Memory.poke(memAddress + 128, 12300);
        do Memory.poke(memAddress + 160, 8196);
        do Memory.poke(memAddress + 192, 9828);
        do Memory.poke(memAddress + 224, 9828);
        do Memory.poke(memAddress + 256, 8196);
        do Memory.poke(memAddress + 288, 8196);
        do Memory.poke(memAddress + 320, 9238);
        do Memory.poke(memAddress + 352, 13282);
        do Memory.poke(memAddress + 384, 4098);
        do Memory.poke(memAddress + 416, 6130);
        do Memory.poke(memAddress + 448, 5142);
        do Memory.poke(memAddress + 480, 7196);
        return;
    }

    method void renderLeft(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 62);
        do Memory.poke(memAddress + 64, 4067);
        do Memory.poke(memAddress + 96, 6145);
        do Memory.poke(memAddress + 128, 4135);
        do Memory.poke(memAddress + 160, 4884);
        do Memory.poke(memAddress + 192, 4884);
        do Memory.poke(memAddress + 224, 4116);
        do Memory.poke(memAddress + 256, 4116);
        do Memory.poke(memAddress + 288, 4884);
        do Memory.poke(memAddress + 320, 4903);
        do Memory.poke(memAddress + 352, 4097);
        do Memory.poke(memAddress + 384, 6175);
        do Memory.poke(memAddress + 416, 4080);
        do Memory.poke(memAddress + 448, 0);
        do Memory.poke(memAddress + 480, 0);
        return;
    }

    method void renderRight(int location) {
        var int memAddress;
        let memAddress = 16384 + location;
        do Memory.poke(memAddress + 0, 0);
        do Memory.poke(memAddress + 32, 0);
        do Memory.poke(memAddress + 64, 4080);
        do Memory.poke(memAddress + 96, -2024);
        do Memory.poke(memAddress + 128, -32760);
        do Memory.poke(memAddress + 160, -6968);
        do Memory.poke(memAddress + 192, 10440);
        do Memory.poke(memAddress + 224, 10248);
        do Memory.poke(memAddress + 256, 10248);
        do Memory.poke(memAddress + 288, 10440);
        do Memory.poke(memAddress + 320, 10440);
        do Memory.poke(memAddress + 352, -7160);
        do Memory.poke(memAddress + 384, -32744);
        do Memory.poke(memAddress + 416, -14352);
        do Memory.poke(memAddress + 448, 31744);
        do Memory.poke(memAddress + 480, 0);
        return;
    }
}
